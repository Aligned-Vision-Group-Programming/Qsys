#SYMBOL_NAME "Qsys Fader"

//#INCLUDEPATH "D:\\Programming\\Crestron Modules\\Mat\\SIMPLSharp Projects\\Qsys\\QscQsys\\QscQsys\\bin\\Debug"
#USER_SIMPLSHARP_LIBRARY "QscQsys"

Digital_Input MuteOn, MuteOff, MuteToggle, VolumeUp, VolumeDown;
Analog_Input Volume;

Digital_Output MuteIsOn, MuteIsOff;
Analog_Output _skip_,_skip_,_skip_, VolumeValue;
                          
QsysProcessorSimplInterface processor;                          
QsysFaderSimpl fader;

String_Parameter _skip_,_skip_,_skip_,_skip_,_skip_,_skip_, ComponentName[100];                                       

Integer_Parameter VolumeStep, VolumeRepeatTime;

#BEGIN_PARAMETER_PROPERTIES VolumeRepeatTime
    propValidUnits = unitTime;
#END_PARAMETER_PROPERTIES

integer currentVolume;
integer newDirection;

function VolumeRepeat(integer direction)
{
	newDirection = direction;

    if(newDirection = 1 && currentVolume <= 65535 - VolumeStep)
    	fader.Volume(currentVolume + VolumeStep);
    else if(newDirection = 1 && currentVolume > 65535 - VolumeStep)
        fader.Volume(65535);
	else if(newDirection = 0 && currentVolume >= 0 + VolumeStep)
		fader.Volume(currentVolume - VolumeStep);
    else if(newDirection = 0 && currentVolume < 0 + VolumeStep)
        fader.Volume(0);

    wait(VolumeRepeatTime, vRepeat)
    {
        VolumeRepeat(newDirection);
    }
}


Push MuteOn
{
    fader.Mute(1);
}

Push MuteOff
{
    fader.Mute(0);
}

Push MuteToggle
{
    if(!MuteIsOn && MuteIsOff)
    {
        fader.Mute(1);
    }
    else if (MuteIsOn && !MuteIsOff)
    {
        fader.Mute(0);
    }
}

Push VolumeUp
{
    VolumeRepeat(1);
}

Release VolumeUp
{
    CancelWait(vRepeat);
}

Push VolumeDown
{
    VolumeRepeat(0);
}

Release VolumeDown
{
    CancelWait(vRepeat);
}

Threadsafe Change Volume
{
    integer x;

    if(Volume = 0)
    {
        fader.Volume(0);
    }
    else 
    {
        While(x != volume)
        {
            x = Volume;
            fader.Volume(x);
        }
    }
}

Callback Function onInitializationComplete(integer value)
{        
}

Callback Function onVolumeChange(integer value)
{
    currentVolume = value;
    VolumeValue = currentVolume;
}

Callback Function onMuteChange(integer value)
{
    switch(value)
    {
       case (1):
       {
           MuteIsOff = OFF;
           MuteIsOn = ON;
       }
       case (0):
       {
           MuteIsOff = ON;
           MuteIsOn = OFF;
       }
    }
}

Function Main()
{              
    RegisterDelegate(processor, onIsRegistered, onInitializationComplete);
    RegisterDelegate(fader, newVolumeChange, onVolumeChange);
    REgisterDelegate(fader, newMuteChange, onMuteChange); 
    fader.Initialize(ComponentName);                                  

}
