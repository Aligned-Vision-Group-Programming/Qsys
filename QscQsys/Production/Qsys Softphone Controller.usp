#SYMBOL_NAME "Qsys Softphone Controller"

//#INCLUDEPATH "D:\\Programming\\Crestron Modules\\Mat\\SIMPLSharp Projects\\Qsys\\QscQsys\\QscQsys\\bin\\Debug"
#USER_SIMPLSHARP_LIBRARY "QscQsys" 

#DEFINE_CONSTANT true 1
#DEFINE_CONSTANT false 0

Digital_Input Dial, Redial, Connect, Disconnect, AutoAnswerToggle, DndToggle, _skip_, KeyPadDelete, KeyPadClear, KeyPadStar, KeyPadPound, KeyPad[10], _skip_, _skip_, _skip_, _skip_, SelectRecentCall[5,5];
Analog_Input SelectRecentCallIndex;

Digital_Output Connected, Ringing, Dialing, _skip_, AutoAnswerStatus, DndStatus;
String_Output _skip_, _skip_, _skip_, _skip_, _skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_, _skip_, _skip_,_skip_,_skip_, CurrentlyCalling, CallStatus, DialStringOut, RecentCallXSig, RecentCalls[5,5];

QsysSoftphoneControllerSimpl softphone;

String_Parameter _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,_skip_, _skip_, _skip_, _skip_, _skip_,_skip_,_skip_,_skip_,_skip_,_skip_, _skip_, _skip_,_skip_,_skip_,_skip_,_skip_, _skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_, ComponentName[100];

Push Dial
{
    softphone.DialWithoutString();
}

Push Redial
{
    softphone.Redial();
}

Push Connect
{
    softphone.Connect();
}

Push Disconnect
{
    softphone.Disconnect();
}

Push AutoAnswerToggle
{
    softphone.AutoAnswerToggle();
}

Push DndToggle
{
    softphone.DndToggle();
}

Threadsafe Push KeyPad
{
    integer x;

    x = GetLastModifiedArrayIndex();

    softphone.NumPad(ItoA(x - 1));
}

Push KeyPadDelete
{
    softphone.NumPadDelete();
}

Push KeyPadClear
{
    softphone.NumPadClear();
}

Push KeyPadStar
{
    softphone.NumPad("*");
}

Push KeyPadPound
{
    softphone.NumPad("#");
}

Threadsafe Push SelectRecentCall
{
    integer x;

    x = GetLastModifiedArrayIndex();

    softphone.SelectRecentCall(x);
}

Threadsafe Change SelectRecentCallIndex
{
    integer x;

    while(x != SelectRecentCallIndex)
    {
        x = SelectRecentCallIndex;

        softphone.SelectRecentCall(x);
    }
}

Callback Function NewOffHookEvent(integer value)
{
    if(value)
        Connected = true;
    else
        Connected = false;
}

Callback Function NewRingingEvent(integer value)
{
    if(value)
        Ringing = true;
    else
        Ringing = false;
}

Callback Function NewDialingEvent(integer value)
{
    if(value)
        Dialing = true;
    else
        Dialing = false;
}

Callback Function NewAutoAnswerEvent(integer value)
{
    if(value)
        AutoAnswerStatus = true;
    else
        AutoAnswerStatus = false;
}

Callback Function NewDndEvent(integer value)
{
    if(value)
        DndStatus = true;
    else
        DndStatus = false;
}

Callback Function NewDialStringEvent(string newDialString)
{
    DialStringOut = newDialString;
}

Callback Function NewCurrentlyCallingEvent(string newCurrentlyCalling)
{
    CurrentlyCalling = newCurrentlyCalling;
}

callback function NewCurrentCallStatusChange(string status)
{
    CallStatus = status;
}

callback function NewRecentCallsEvent(string call1, string call2, string call3, string call4, string call5)
{
    RecentCalls[1] = call1;
    RecentCalls[2] = call2;
    RecentCalls[3] = call3;
    RecentCalls[4] = call4;
    RecentCalls[5] = call5;
}

callback function NewRecentCallListEvent(string xsig)
{
        RecentCallXSig = xsig;
}

Function Main()
{
    RegisterDelegate(softphone, onOffHookEvent, NewOffHookEvent);
    RegisterDelegate(softphone, onRingingEvent, NewRingingEvent);
    RegisterDelegate(softphone, onDialingEvent, NewDialingEvent);
    RegisterDelegate(softphone, onAutoAnswerEvent, NewAutoAnswerEvent);
    RegisterDelegate(softphone, onDndEvent, NewDndEvent);
    RegisterDelegate(softphone, onDialStringEvent, NewDialStringEvent);
    RegisterDelegate(softphone, onCurrentlyCallingEvent, NewCurrentlyCallingEvent);
    RegisterDelegate(softphone, onCurrentCallStatusChange, NewCurrentCallStatusChange);
    RegisterDelegate(softphone, onRecentCallsEvent, NewRecentCallsEvent);
    RegisterDelegate(softphone, onRecentCallListEvent, NewRecentCallListEvent);
    softphone.Initialize(ComponentName);
}