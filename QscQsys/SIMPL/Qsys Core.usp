#SYMBOL_NAME "Qsys Core"

#INCLUDEPATH "C:\\Users\\mathew.klucznyk\\OneDrive - Global USS\\Crestron Modules\\Mat\\SIMPLSharp Projects\\Qsys\\QscQsys\\QscQsys\\bin\\Debug"
#USER_SIMPLSHARP_LIBRARY "QscQsys"

Digital_Input Initialize;

String_Input _skip_, _skip_, _skip_, _skip_, _skip_, Response[1000];

Digital_Output IsInitialized, IsConnected, IsLoggedIn, IsRedundant, IsEmulator;

String_Output DesignName, Command;

String_Parameter _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, CoreID[100], TestingHost[100], DeploymentHost[100];
Integer_Parameter Port, DeploymentMode, UseExternalConnection, DebugMode;
string_parameter Username[100], Password[100];

integer waitTillStart;

QsysCore processor;

Push Initialize
{                
	while(!waitTillStart)
	{}
	processor.Debug(DebugMode);
	if(DeploymentMode = 1)
		processor.Initialize(CoreID, DeploymentHost, Port, Username, Password, UseExternalConnection);
	else if(DeploymentMode = 0)
		processor.Initialize(CoreID, TestingHost, Port, Username, Password, UseExternalConnection);
}

Change Response
{
	processor.NewExternalResponse(Response);
}

Callback Function NewIsRegistered(integer value)
{
	if(value = 1)
		IsInitialized = ON;
	else
		IsInitialized = OFF;
}     

Callback Function NewIsConnected(integer value)
{
	if(value = 1)
		IsConnected = ON;
	else
		IsConnected = OFF;
}

Callback Function NewCoreStatus(string dName, integer redundant, integer emulator)
{
	DesignName = dName;
	IsRedundant = redundant;
	IsEmulator = emulator;
}

callback function NewIsLoggedIn(integer status)
{
	IsLoggedIn = status;
}

callback function NewSendingCommand(string comm)
{
	Command = comm;
}

Function Main()
{
	RegisterDelegate(processor, onIsRegistered, NewIsRegistered);  
	RegisterDelegate(processor, onIsConnected, NewIsConnected);
	RegisterDelegate(processor, onNewCoreStatus, NewCoreStatus);
	RegisterDelegate(processor, onIsLoggedIn, NewIsLoggedIn);
	RegisterDelegate(processor, onSendingCommand, NewSendingCommand);
	
	
	
	waitTillStart = 1;
}
