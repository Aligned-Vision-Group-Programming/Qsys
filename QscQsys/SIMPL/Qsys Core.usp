#CATEGORY "0" // Hidden
#SYMBOL_NAME "Qsys Core"

#USER_SIMPLSHARP_LIBRARY "QscQsys"

Digital_Input Initialize, UseExternalConnection;

analog_input DebugMode, Port;

string_input PrimaryIpAddress[255], BackupIpAddress[255], Username[100], Password[100];

Buffer_Input Response[65534];

Digital_Output IsInitialized, PrimaryIsConnected, BackupIsConnected, PrimaryIsActive, BackupIsActive, IsLoggedIn, IsRedundant, IsEmulator;

String_Output DesignName, Command;

String_Parameter _skip_,_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
Default_PrimaryIpAddress[255], Default_BackupIpAddress[255], CoreID[100];

integer waitTillStart, _port;
string _primaryIpa[255], _backupIpa[255], _username[100], _password[100];

QsysCore processor;

threadsafe Push Initialize
{
	while(!waitTillStart)
	{}
	processor.Initialize(CoreID, _primaryIpa, _backupIpa, _port, _username, _password, UseExternalConnection);
}

Threadsafe Change DebugMode
{
	processor.Debug(DebugMode);
}

change PrimaryIpAddress
{
	_primaryIpa = PrimaryIpAddress;
	processor.PrimaryHost = _primaryIpa;
}

change BackupIpAddress
{
	_backupIpa = BackupIpAddress;
	processor.BackupHost = _backupIpa;
}

Change Username
{
	_username = Username;
	processor.Username = _username;
}

Change Password
{
	_password = Password;
	processor.Password = _password;
}

Change Port
{
	_port = Port;
	processor.Port = _port;
}

Callback Function NewIsRegistered(string id, integer value)
{
	IsInitialized = value;
}

Callback Function NewPrimaryIsConnected(string id, integer value)
{
	PrimaryIsConnected = value;
}

callback function NewBackupIsConnected(string id, integer value)
{
	BackupIsConnected = value;
}

Callback Function NewCoreStatus(string id, string dName, integer redundant, integer emulator)
{
	DesignName = dName;
	IsRedundant = redundant;
	IsEmulator = emulator;
}

callback function NewIsLoggedIn(string id, integer status)
{
	IsLoggedIn = status;
}

callback function NewSendingCommand(string id, string comm)
{
	string tx[65534];
	
	tx = comm;
	Command = tx;
}

callback function NewPrimaryIsActive()
{
	BackupIsActive = OFF;
	PrimaryIsActive = ON;
}

callback function NewBackupIsActive()
{
	PrimaryIsActive = OFF;
	BackupIsActive = ON;
}

callback GatherEventHandler RxGatherHandler(GatherEventArgs e)
{
	try
	{
		if(e.Results = 0)
		{
			processor.NewExternalResponse(e.RxString);		
		}
	}
	catch
	{   
		GenerateUserError("RxGatherHandler Exception: %s\n", GetExceptionMessage());
	}
	ReArmGatherAsync(e.Input);
}

Function Main()
{    
	WaitForInitializationComplete();
	
	_port = 1710;
	_primaryIpa = Default_PrimaryIpAddress;
	_backupIpa = Default_BackupIpAddress;
	if(GatherAsync("\x00", Response, RxGatherHandler, 500) = -1)
	{
	}
	
	RegisterDelegate(processor, OnIsRegistered, NewIsRegistered);  
	RegisterDelegate(processor, OnPrimaryIsConnected, NewPrimaryIsConnected);
	RegisterDelegate(processor, OnBackupIsConnected, NewBackupIsConnected);
	RegisterDelegate(processor, OnNewCoreStatus, NewCoreStatus);
	RegisterDelegate(processor, OnPrimaryIsActive, NewPrimaryIsActive);
	RegisterDelegate(processor, OnBackupIsActive, NewBackupIsActive);
	RegisterDelegate(processor, OnIsLoggedIn, NewIsLoggedIn);
	RegisterDelegate(processor, OnSendingCommand, NewSendingCommand);
	
	//do not remove delay, we need to wait until all objects are instatiated and ready
	delay(1000);
	waitTillStart = 1;
}
