#SYMBOL_NAME "Qsys Core"

#USER_SIMPLSHARP_LIBRARY "QscQsys"

Digital_Input Initialize;

Buffer_Input _skip_, _skip_, _skip_, _skip_, _skip_, Response[65534];

Digital_Output IsInitialized, IsConnected, IsLoggedIn, IsRedundant, IsEmulator;

String_Output DesignName, Command;

String_Parameter _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, CoreID[100], TestingHost[100], DeploymentHost[100];
Integer_Parameter Port, DeploymentMode, UseExternalConnection, DebugMode;
string_parameter Username[100], Password[100];

integer waitTillStart;

QsysCore processor;

threadsafe Push Initialize
{                
	while(!waitTillStart)
	{}
	processor.Debug(DebugMode);
	if(DeploymentMode = 1)
		processor.Initialize(CoreID, DeploymentHost, Port, Username, Password, UseExternalConnection);
	else if(DeploymentMode = 0)
		processor.Initialize(CoreID, TestingHost, Port, Username, Password, UseExternalConnection);
}

Callback Function NewIsRegistered(integer value)
{
	if(value = 1)
		IsInitialized = ON;
	else
		IsInitialized = OFF;
}     

Callback Function NewIsConnected(integer value)
{
	if(value = 1)
		IsConnected = ON;
	else
		IsConnected = OFF;
}

Callback Function NewCoreStatus(string dName, integer redundant, integer emulator)
{
	DesignName = dName;
	IsRedundant = redundant;
	IsEmulator = emulator;
}

callback function NewIsLoggedIn(integer status)
{
	IsLoggedIn = status;
}

callback function NewSendingCommand(string comm)
{
	string tx[65534];
	
	tx = comm;
	Command = tx;
}

/*EventHandler NewSendingCommandEvent(QsysCore sender, SendingCommandEventArgs e)
{
	Command = e.Comm;
}*/


callback GatherEventHandler RxGatherHandler(GatherEventArgs e)
{
	try
	{
		if(e.Results = 0)
		{
			processor.NewExternalResponse(e.RxString);		
		}
	}
	catch
	{   
		Trace("RxGatherHandler Exception: %s\n", GetExceptionMessage());
	}
	ClearBuffer(e.Input);
	ReArmGatherAsync(e.Input);
}

Function Main()
{    
    if(GatherAsync("\x00", Response, RxGatherHandler, 500) = -1)
    {
    }
	
	RegisterDelegate(processor, onIsRegistered, NewIsRegistered);  
	RegisterDelegate(processor, onIsConnected, NewIsConnected);
	RegisterDelegate(processor, onNewCoreStatus, NewCoreStatus);
	RegisterDelegate(processor, onIsLoggedIn, NewIsLoggedIn);
	//RegisterEvent(processor, SendingCommandEvent, NewSendingCommandEvent);
	RegisterDelegate(processor, onSendingCommand, NewSendingCommand);
	
	
	
	waitTillStart = 1;
}
