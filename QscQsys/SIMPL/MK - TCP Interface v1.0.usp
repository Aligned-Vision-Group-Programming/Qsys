#SYMBOL_NAME "MK - TCP Interface v1.0"

//#INCLUDEPATH "C:\\Users\\mklucznyk\\OneDrive - RAVE AUDIO VISUAL\\Modules\\RAVE Modules\\SIMPLSharp Projects\\TCP\\TCPClient\\TCPClient\\bin"
#USER_SIMPLSHARP_LIBRARY "TCPClient"

#ENABLE_TRACE

Digital_Input Connect, Disconnect;
Analog_Input Port;
String_Input IPAddress[16], Command[255];

Digital_Output IsConnected;
String_Output ConnectionStatus$, Response;

TCPClientDevice Client;

Push Connect
{
	Client.Connect(IPAddress, Port);
}

Push Disconnect
{
	Client.Disconnect();
}

Threadsafe Change Command
{
	Client.SendCommand(Command);
}

Callback Function newStatus(String sStatus)
{
	Trace("Status Change: %s", sStatus);
	
	If(sStatus = "SOCKET_STATUS_NO_CONNECT")
	{
		IsConnected = OFF;
		ConnectionStatus$ = "Not connected";
	}
		
	Else IF(sStatus = "SOCKET_STATUS_WAITING")
	{     
		IsConnected = OFF;
		ConnectionStatus$ = "Waiting for connection";
	}
		
	Else IF(sStatus = "SOCKET_STATUS_CONNECTED")
	{
		IsConnected = ON;
		ConnectionStatus$ = "Connected";
	}
		
	Else IF(sStatus = "SOCKET_STATUS_CONNECT_FAILED")
	{
		IsConnected = OFF;
		ConnectionStatus$ = "Connection failed";
	}
		
	Else IF(sStatus = "SOCKET_STATUS_BROKEN_REMOTELY")
	{
		IsConnected = OFF;
		ConnectionStatus$ = "Connection broken remotley";
	}	 
		
	Else IF(sStatus = "SOCKET_STATUS_BROKEN_LOCALLY")
	{
		IsConnected = OFF;
		ConnectionStatus$ = "Connection broken locally";
	}
		
	Else IF(sStatus = "SOCKET_STATUS_DNS_LOOKUP")
	{
		IsConnected = OFF;
		ConnectionStatus$ = "Performing DNS lookup";
	}
		
	Else IF(sStatus = "SOCKET_STATUS_DNS_FAILED")
	{
		IsConnected = OFF;
		ConnectionStatus$ = "DNS lookup failed";
	}
		
	Else IF(sStatus = "SOCKET_STATUS_DNS_RESOLVED")
	{
		IsConnected = OFF;
		ConnectionStatus$ = "DNS name resolved";
	}
		
	Else IF(sStatus = "SOCKET_STATUS_LINK_LOST")
	{
		IsConnected = OFF;
		ConnectionStatus$ = "Link lost";
	}
		
	Else IF(sStatus = "SOCKET_STATUS_SOCKET_NOT_EXIST")
	{
		IsConnected = OFF;
		ConnectionStatus$ = "Invalid (Client) Socket Index/Socket does not exist";
	}
}

Callback Function newError(String sError)
{
	Trace("Error Returned: %s", sError);
}

Callback Function newResponse(String sResponse)
{
	Trace("Response Found: %s", sResponse);
	Response = sResponse;
}

Function Main()
{
	RegisterDelegate(Client, onStatus, newStatus);
	RegisterDelegate(Client, onError, newError);
	RegisterDelegate(Client, onResponse, newResponse);
}
