#CATEGORY "46" "Qsys" // Custom
#SYMBOL_NAME "Qsys Generic Level Component Control"

#USER_SIMPLSHARP_LIBRARY "QscQsys"
#ENABLE_TRACE

#DEFINE_CONSTANT true 1
#DEFINE_CONSTANT false 0



Digital_Input VolumeUp, VolumeDown;
Analog_Input Volume;

Analog_Output _skip_, _skip_, VolumePrecentage;

String_Parameter _skip_,_skip_,_skip_, CoreID[100], LevelComponentName[100], LevelComponentControlName[100];                                       

Integer_Parameter VolumeStep, VolumeRepeatTime, VolumeHoldTillRepeatTime;

#BEGIN_PARAMETER_PROPERTIES VolumeRepeatTime
propValidUnits = unitTime;
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES CoreID
propValidUnits = unitString;
propDefaultUnit = unitString;
propDefaultValue = "1";
#END_PARAMETER_PROPERTIES

IntegerGenericComponentControl integerControl;
integer currentVolume;
CMutex _volRampMutex;
integer _volRampDirection;

function VolumeRepeat()
{
	if(_volRampDirection = 0)
	{
		return;
	}
	else{
		if(_volRampDirection = 1)
		{
			if(currentVolume <= 65535 - VolumeStep)
			integerControl.SetUnsignedInteger(currentVolume + VolumeStep , 1);
			else if(_volRampDirection = 1 && currentVolume > 65535 - VolumeStep)
			integerControl.SetUnsignedInteger(65535 , 1);
		}
		else if(_volRampDirection = 2)
		{
			if(currentVolume >= 0 + VolumeStep)
			integerControl.SetUnsignedInteger(currentVolume - VolumeStep , 1);
			else if(currentVolume < 0 + VolumeStep)
			integerControl.SetUnsignedInteger(0 , 1);
		}
		
		if(_volRampDirection > 0)
		{
			wait(VolumeRepeatTime, vRepeat)
			{
				VolumeRepeat();
			}
		}
	}
}

function VolumeSet()
{
	if(_volRampDirection = 0)
	{
		return;
	}
	else 
	{
		if(_volRampDirection = 1)
		{
			if(currentVolume <= 65535 - VolumeStep)
			integerControl.SetUnsignedInteger(currentVolume + VolumeStep , 1);
			else if(currentVolume > 65535 - VolumeStep)
			integerControl.SetUnsignedInteger(65535 , 1);
		}
		else if(_volRampDirection = 2)
		{
			if(currentVolume >= 0 + VolumeStep)
			integerControl.SetUnsignedInteger(currentVolume - VolumeStep , 1);
			else if(currentVolume < 0 + VolumeStep)
			integerControl.SetUnsignedInteger(0 , 1);
		}
		
		if(_volRampDirection > 0)
		{
			wait(VolumeHoldTillRepeatTime, vHold)
			{
				VolumeRepeat();
			}
		}
	}
}

Push VolumeUp
{
	_volRampMutex.WaitForMutex();
	_volRampDirection = 1;
	VolumeSet();
	_volRampMutex.ReleaseMutex();
}

Release VolumeUp
{
	_volRampMutex.WaitForMutex();
	_volRampDirection = 0;
	CancelWait(vHold);
	CancelWait(vRepeat);
	_volRampMutex.ReleaseMutex();
}

Push VolumeDown
{
	_volRampMutex.WaitForMutex();
	_volRampDirection = 2;
	VolumeSet();
	_volRampMutex.ReleaseMutex();
}

Release VolumeDown
{
	_volRampMutex.WaitForMutex();
	_volRampDirection = 0;
	CancelWait(vHold);
	CancelWait(vRepeat);
	_volRampMutex.ReleaseMutex();
}

Threadsafe Change Volume
{
	integer x;
	
	if(Volume = 0)
	{
		integerControl.SetUnsignedInteger(0 , 1);
	}
	else 
	{
		While(x != Volume)
		{
			x = Volume;
			integerControl.SetUnsignedInteger(x , 1);
		}
	}
}

callback function UnsignedChanged(string compName, string contName, integer value)
{
	currentVolume = value;
	VolumePrecentage = currentVolume;
}

Function Main()
{
	_volRampDirection = 0;

	RegisterDelegate(integerControl, UnsignedDataChangedCallback, UnsignedChanged);              
	integerControl.Initialize(CoreID, LevelComponentName, LevelComponentControlName);                               
}
